
// HttpDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "Http.h"
#include "HttpDlg.h"
#include "afxdialogex.h"
#include "UrlInfoDlg.h"


#include "com/StringTool.h"
#include "com/BufferTool.h"
#include "com/TimeTool.h"
using namespace com;

#include "http/Url.h"
#include "http/Form.h"
#include "http/HttpRequest.h"
#include "http/HttpResponse.h"
using namespace http;


#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CHttpDlg 对话框

Form _form;


CHttpDlg::CHttpDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(CHttpDlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CHttpDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_EDIT1, m_edUrl);
	DDX_Control(pDX, IDC_EDIT2, m_edFormKey);
	DDX_Control(pDX, IDC_EDIT3, m_edFormValue);
}

BEGIN_MESSAGE_MAP(CHttpDlg, CDialogEx)
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON1, &CHttpDlg::OnBnClickedButton1)
	ON_BN_CLICKED(IDC_BUTTON2, &CHttpDlg::OnBnClickedButton2)
	ON_BN_CLICKED(IDC_BUTTON3, &CHttpDlg::OnBnClickedButton3)
	ON_BN_CLICKED(IDC_BUTTON4, &CHttpDlg::OnBnClickedButton4)
	ON_BN_CLICKED(IDC_BUTTON5, &CHttpDlg::OnBnClickedButton5)
	ON_BN_CLICKED(IDC_BUTTON6, &CHttpDlg::OnBnClickedButton6)
	ON_BN_CLICKED(IDC_BUTTON7, &CHttpDlg::OnBnClickedButton7)
	ON_BN_CLICKED(IDC_BUTTON8, &CHttpDlg::OnBnClickedButton8)
	ON_BN_CLICKED(IDC_BUTTON9, &CHttpDlg::OnBnClickedButton9)
	ON_BN_CLICKED(IDC_BUTTON10, &CHttpDlg::OnBnClickedButton10)
	ON_BN_CLICKED(IDC_BUTTON11, &CHttpDlg::OnBnClickedButton11)
	ON_BN_CLICKED(IDC_BUTTON12, &CHttpDlg::OnBnClickedButton12)
	ON_BN_CLICKED(IDC_BUTTON13, &CHttpDlg::OnBnClickedButton13)
	ON_BN_CLICKED(IDC_BUTTON14, &CHttpDlg::OnBnClickedButton14)
	ON_BN_CLICKED(IDC_BUTTON15, &CHttpDlg::OnBnClickedButton15)
	ON_BN_CLICKED(IDC_BUTTON16, &CHttpDlg::OnBnClickedButton16)
	ON_BN_CLICKED(IDC_BUTTON17, &CHttpDlg::OnBnClickedButton17)
	ON_BN_CLICKED(IDC_BUTTON18, &CHttpDlg::OnBnClickedButton18)
	ON_BN_CLICKED(IDC_BUTTON19, &CHttpDlg::OnBnClickedButton19)
	ON_BN_CLICKED(IDC_BUTTON20, &CHttpDlg::OnBnClickedButton20)
	ON_BN_CLICKED(IDC_BUTTON21, &CHttpDlg::OnBnClickedButton21)
	ON_BN_CLICKED(IDC_BUTTON22, &CHttpDlg::OnBnClickedButton22)
	ON_BN_CLICKED(IDC_BUTTON23, &CHttpDlg::OnBnClickedButton23)
END_MESSAGE_MAP()


// CHttpDlg 消息处理程序

BOOL CHttpDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO:  在此添加额外的初始化代码
	m_edUrl.SetWindowText(_T("http://192.168.0.1:8088/Controller/Action?Id=1&username=test001"));


	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CHttpDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CHttpDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void CHttpDlg::OnBnClickedButton1()
{
	// TODO:  在此添加控件通知处理程序代码
	CString strUrl;
	m_edUrl.GetWindowTextW(strUrl);

	string strUrl1 = StringTool::UTF16_2_GB2312(strUrl.GetBuffer());
	Url url(strUrl1);

	vector<pair<string, string>> vec = url.GetParamList();

	CUrlInfoDlg dlg(url);
	dlg.DoModal();

	//	char ch[1024] = { 0 };
	//	sprintf_s(ch, "\
																	// Absolute url: %s \n\n\
																	//     Protocol: %s \n\n\
																	//         Host: %s \n\n\
																	//     HostAddr: %s \n\n\
																	//	 HostType: %s \n\n\
																	//         Port: %d \n\n\
																	//Absolute path: %s \n\n\
																	// Request path: %s \n\n\
																	//  Query param: %s \n", 
	//url.GetAbsoluteUrl().c_str(),
	//url.GetHttpProtocol().c_str(),
	//url.GetHost().c_str(),
	//url.GetHostAddr().c_str(),
	//url.GetHostType() == EHostType::Ip ? "Ip" : "Domain name",
	//url.GetPort(),
	//url.GetAbsolutePath().c_str(),
	//url.GetRequestPath().c_str(),
	//url.GetQueryParam().c_str());
	//
	//	OutputDebugStringA("Parse url result: \n");
	//	OutputDebugStringA(ch);
	//	OutputDebugStringA("\n");
}


void CHttpDlg::OnBnClickedButton2()
{
	// TODO:  在此添加控件通知处理程序代码
	CString strKey, strValue;
	m_edFormKey.GetWindowTextW(strKey);
	m_edFormValue.GetWindowTextW(strValue);

	if (strKey.IsEmpty() || strValue.IsEmpty())
	{
		MessageBox(_T("Please enter key and value"), _T("Http"), MB_OK | MB_ICONWARNING);
		return;
	}


	string strKey1 = StringTool::UTF16_2_GB2312(strKey.GetBuffer());
	string strValue1 = StringTool::UTF16_2_GB2312(strValue.GetBuffer());
	BYTE val = (BYTE)_wtoi(strValue.GetBuffer());

	_form.AddItem(strKey1, val);
}


void CHttpDlg::OnBnClickedButton3()
{
	// TODO:  在此添加控件通知处理程序代码
	CString strKey, strValue;
	m_edFormKey.GetWindowTextW(strKey);
	m_edFormValue.GetWindowTextW(strValue);

	if (strKey.IsEmpty() || strValue.IsEmpty())
	{
		MessageBox(_T("Please enter key and value"), _T("Http"), MB_OK | MB_ICONWARNING);
		return;
	}


	string strKey1 = StringTool::UTF16_2_GB2312(strKey.GetBuffer());
	string strValue1 = StringTool::UTF16_2_GB2312(strValue.GetBuffer());
	INT16 val = (INT16)_wtoi(strValue.GetBuffer());

	_form.AddItem(strKey1, val);
}


void CHttpDlg::OnBnClickedButton4()
{
	// TODO:  在此添加控件通知处理程序代码
	CString strKey, strValue;
	m_edFormKey.GetWindowTextW(strKey);
	m_edFormValue.GetWindowTextW(strValue);

	if (strKey.IsEmpty() || strValue.IsEmpty())
	{
		MessageBox(_T("Please enter key and value"), _T("Http"), MB_OK | MB_ICONWARNING);
		return;
	}


	string strKey1 = StringTool::UTF16_2_GB2312(strKey.GetBuffer());
	string strValue1 = StringTool::UTF16_2_GB2312(strValue.GetBuffer());
	UINT16 val = (UINT16)_wtoi(strValue.GetBuffer());

	_form.AddItem(strKey1, val);
}


void CHttpDlg::OnBnClickedButton5()
{
	// TODO:  在此添加控件通知处理程序代码
	CString strKey, strValue;
	m_edFormKey.GetWindowTextW(strKey);
	m_edFormValue.GetWindowTextW(strValue);

	if (strKey.IsEmpty() || strValue.IsEmpty())
	{
		MessageBox(_T("Please enter key and value"), _T("Http"), MB_OK | MB_ICONWARNING);
		return;
	}


	string strKey1 = StringTool::UTF16_2_GB2312(strKey.GetBuffer());
	string strValue1 = StringTool::UTF16_2_GB2312(strValue.GetBuffer());
	INT32 val = (INT32)_wtoi(strValue.GetBuffer());

	_form.AddItem(strKey1, val);
}


void CHttpDlg::OnBnClickedButton6()
{
	// TODO:  在此添加控件通知处理程序代码
	CString strKey, strValue;
	m_edFormKey.GetWindowTextW(strKey);
	m_edFormValue.GetWindowTextW(strValue);

	if (strKey.IsEmpty() || strValue.IsEmpty())
	{
		MessageBox(_T("Please enter key and value"), _T("Http"), MB_OK | MB_ICONWARNING);
		return;
	}


	string strKey1 = StringTool::UTF16_2_GB2312(strKey.GetBuffer());
	string strValue1 = StringTool::UTF16_2_GB2312(strValue.GetBuffer());
	UINT32 val = (UINT32)_wtoi64(strValue.GetBuffer());

	_form.AddItem(strKey1, val);
}


void CHttpDlg::OnBnClickedButton7()
{
	// TODO:  在此添加控件通知处理程序代码
	CString strKey, strValue;
	m_edFormKey.GetWindowTextW(strKey);
	m_edFormValue.GetWindowTextW(strValue);

	if (strKey.IsEmpty() || strValue.IsEmpty())
	{
		MessageBox(_T("Please enter key and value"), _T("Http"), MB_OK | MB_ICONWARNING);
		return;
	}


	string strKey1 = StringTool::UTF16_2_GB2312(strKey.GetBuffer());
	string strValue1 = StringTool::UTF16_2_GB2312(strValue.GetBuffer());
	INT64 val = (INT64)_wtoi64(strValue.GetBuffer());

	_form.AddItem(strKey1, val);
}


void CHttpDlg::OnBnClickedButton8()
{
	// TODO:  在此添加控件通知处理程序代码
	CString strKey, strValue;
	m_edFormKey.GetWindowTextW(strKey);
	m_edFormValue.GetWindowTextW(strValue);

	if (strKey.IsEmpty() || strValue.IsEmpty())
	{
		MessageBox(_T("Please enter key and value"), _T("Http"), MB_OK | MB_ICONWARNING);
		return;
	}


	string strKey1 = StringTool::UTF16_2_GB2312(strKey.GetBuffer());
	string strValue1 = StringTool::UTF16_2_GB2312(strValue.GetBuffer());
	UINT64 val = (UINT64)_wtoi64(strValue.GetBuffer());

	_form.AddItem(strKey1, val);
}


void CHttpDlg::OnBnClickedButton9()
{
	// TODO:  在此添加控件通知处理程序代码
	CString strKey, strValue;
	m_edFormKey.GetWindowTextW(strKey);
	m_edFormValue.GetWindowTextW(strValue);

	if (strKey.IsEmpty() || strValue.IsEmpty())
	{
		MessageBox(_T("Please enter key and value"), _T("Http"), MB_OK | MB_ICONWARNING);
		return;
	}


	string strKey1 = StringTool::UTF16_2_GB2312(strKey.GetBuffer());
	string strValue1 = StringTool::UTF16_2_GB2312(strValue.GetBuffer());
	FLOAT val = (FLOAT)_wtof(strValue.GetBuffer());

	_form.AddItem(strKey1, val);
}


void CHttpDlg::OnBnClickedButton10()
{
	// TODO:  在此添加控件通知处理程序代码
	CString strKey, strValue;
	m_edFormKey.GetWindowTextW(strKey);
	m_edFormValue.GetWindowTextW(strValue);

	if (strKey.IsEmpty() || strValue.IsEmpty())
	{
		MessageBox(_T("Please enter key and value"), _T("Http"), MB_OK | MB_ICONWARNING);
		return;
	}


	string strKey1 = StringTool::UTF16_2_GB2312(strKey.GetBuffer());
	string strValue1 = StringTool::UTF16_2_GB2312(strValue.GetBuffer());
	double val = (double)_wtof(strValue.GetBuffer());

	_form.AddItem(strKey1, val);
}


void CHttpDlg::OnBnClickedButton11()
{
	// TODO:  在此添加控件通知处理程序代码
	CString strKey, strValue;
	m_edFormKey.GetWindowTextW(strKey);
	m_edFormValue.GetWindowTextW(strValue);

	if (strKey.IsEmpty() || strValue.IsEmpty())
	{
		MessageBox(_T("Please enter key and value"), _T("Http"), MB_OK | MB_ICONWARNING);
		return;
	}


	string strKey1 = StringTool::UTF16_2_GB2312(strKey.GetBuffer());
	string strValue1 = StringTool::UTF16_2_GB2312(strValue.GetBuffer());
	bool val = strValue1 == "true" ? true : false;

	_form.AddItem(strKey1, val);
}


void CHttpDlg::OnBnClickedButton12()
{
	// TODO:  在此添加控件通知处理程序代码
	CString strKey;
	m_edFormKey.GetWindowTextW(strKey);

	if (strKey.IsEmpty())
	{
		MessageBox(_T("Please enter key"), _T("Http"), MB_OK | MB_ICONWARNING);
		return;
	}


	string strKey1 = StringTool::UTF16_2_GB2312(strKey.GetBuffer());
	_form.RemoveItem(strKey1);
}


void CHttpDlg::OnBnClickedButton13()
{
	// TODO:  在此添加控件通知处理程序代码
	string str = _form.Join();
	MessageBoxA(m_hWnd, str.c_str(), "Http", MB_OK);
}


void CHttpDlg::OnBnClickedButton14()
{
	// TODO:  在此添加控件通知处理程序代码
	CString strKey, strValue;
	m_edFormKey.GetWindowTextW(strKey);
	m_edFormValue.GetWindowTextW(strValue);

	if (strKey.IsEmpty() || strValue.IsEmpty())
	{
		MessageBox(_T("Please enter key and value"), _T("Http"), MB_OK | MB_ICONWARNING);
		return;
	}


	string strKey1 = StringTool::UTF16_2_GB2312(strKey.GetBuffer());
	string strValue1 = StringTool::UTF16_2_GB2312(strValue.GetBuffer());

	_form.AddItem(strKey1, strValue1);
}


void CHttpDlg::OnBnClickedButton15()
{
	// TODO:  在此添加控件通知处理程序代码
	BYTE buf[5] = { 1, 2, 3, 4, 5 };

}


void CHttpDlg::OnBnClickedButton16()
{
	// TODO:  在此添加控件通知处理程序代码
	int len = 0;
}


void CHttpDlg::OnBnClickedButton17()
{
	// TODO:  在此添加控件通知处理程序代码
	//HttpRequest req("http://127.0.0.1:8017/?s=97867554534");
	//req.header.SetHeader("Header1", "dasfcsdfsfsfsfs");

	//BYTE buf[1024] = { 0 };
	//int n = req.GenerateBuf(buf, 1024);

	//string str = BufferTool::Join(buf, n, " ", "%02X");
	//OutputDebugStringA(str.c_str());
	//OutputDebugStringA("\n");


	HttpRequest req("http://127.0.0.1:8002/Home/FormReq?s=汉字123qwer", "POST");
	req.header.SetHeader(HttpHeaderDef::ContentType, "application/x-www-form-urlencoded");
	req.body.form.AddItem("Id", 1);
	req.body.form.AddItem("Username", "AAtest002");
	req.body.form.AddItem("Name", "汉字123qwe!@#");
	req.body.form.AddItem("Datetime", TimeTool::GetCurrentTimeStr());

	BYTE buf[1024] = { 0 };
	int n = req.GenerateBuf(buf, 1024);

	string str = BufferTool::Join(buf, n, " ", "%02X");
	OutputDebugStringA(str.c_str());
	OutputDebugStringA("\n");
}


void CHttpDlg::OnBnClickedButton18()
{
	// TODO:  在此添加控件通知处理程序代码
	HttpRequest req("http://127.0.0.1:8017/?s=97867554534", "POST", "application/x-www-form-urlencoded");
	req.body.form.AddItem("Id", 30001);
	req.body.form.AddItem("username", "AAtest001");
	req.body.form.AddItem("score", 9999.55);

	BYTE buf[1024] = { 0 };
	int n = req.GenerateBuf(buf, 1024);

	string str = BufferTool::Join(buf, n, " ", "%02X");
	OutputDebugStringA(str.c_str());
	OutputDebugStringA("\n");
}


void CHttpDlg::OnBnClickedButton19()
{
	// TODO:  在此添加控件通知处理程序代码
	BYTE buf[] = {
		0x47, 0x45, 0x54, 0x20, 0x2F, 0x3F, 0x73, 0x3D, 0x39, 0x37, 0x38, 0x36, 0x37, 0x35, 0x35, 0x34, 0x35, 0x33, 0x34, 0x20,
		0x48, 0x54, 0x54, 0x50, 0x2F, 0x31, 0x2E, 0x31, 0x0D, 0x0A, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x31, 0x3A, 0x20, 0x64,
		0x61, 0x73, 0x66, 0x63, 0x73, 0x64, 0x66, 0x73, 0x66, 0x73, 0x66, 0x73, 0x66, 0x73, 0x0D, 0x0A, 0x48, 0x6F, 0x73, 0x74,
		0x3A, 0x20, 0x31, 0x32, 0x37, 0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x31, 0x3A, 0x38, 0x30, 0x31, 0x37, 0x0D, 0x0A, 0x55, 0x73,
		0x65, 0x72, 0x2D, 0x41, 0x67, 0x65, 0x6E, 0x74, 0x3A, 0x20, 0x4D, 0x6F, 0x7A, 0x69, 0x6C, 0x6C, 0x61, 0x2F, 0x35, 0x2E,
		0x30, 0x20, 0x28, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x73, 0x20, 0x4E, 0x54, 0x20, 0x36, 0x2E, 0x31, 0x3B, 0x20, 0x57,
		0x69, 0x6E, 0x36, 0x34, 0x3B, 0x20, 0x78, 0x36, 0x34, 0x29, 0x20, 0x41, 0x70, 0x70, 0x6C, 0x65, 0x57, 0x65, 0x62, 0x4B,
		0x69, 0x74, 0x2F, 0x35, 0x33, 0x37, 0x2E, 0x33, 0x36, 0x20, 0x28, 0x4B, 0x48, 0x54, 0x4D, 0x4C, 0x2C, 0x20, 0x6C, 0x69,
		0x6B, 0x65, 0x20, 0x47, 0x65, 0x63, 0x6B, 0x6F, 0x29, 0x20, 0x43, 0x68, 0x72, 0x6F, 0x6D, 0x65, 0x2F, 0x37, 0x34, 0x2E,
		0x30, 0x2E, 0x33, 0x37, 0x32, 0x39, 0x2E, 0x31, 0x36, 0x39, 0x20, 0x53, 0x61, 0x66, 0x61, 0x72, 0x69, 0x2F, 0x35, 0x33,
		0x37, 0x2E, 0x33, 0x36, 0x0D, 0x0A, 0x0D, 0x0A
	};
	int len = sizeof(buf) / sizeof(BYTE);

	int used = 0;
	HttpRequest req;
	bool result = HttpRequest::ParseFromBuf(buf, len, req, used);
}


void CHttpDlg::OnBnClickedButton20()
{
	// TODO:  在此添加控件通知处理程序代码
	BYTE buf[] = {
		0x50, 0x4F, 0x53, 0x54, 0x20, 0x2F, 0x3F, 0x73, 0x3D, 0x39, 0x37, 0x38, 0x36, 0x37, 0x35, 0x35, 0x34, 0x35, 0x33, 0x34,
		0x20, 0x48, 0x54, 0x54, 0x50, 0x2F, 0x31, 0x2E, 0x31, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2D, 0x4C,
		0x65, 0x6E, 0x67, 0x74, 0x68, 0x3A, 0x20, 0x34, 0x31, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2D, 0x54,
		0x79, 0x70, 0x65, 0x3A, 0x20, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x78, 0x2D, 0x77,
		0x77, 0x77, 0x2D, 0x66, 0x6F, 0x72, 0x6D, 0x2D, 0x75, 0x72, 0x6C, 0x65, 0x6E, 0x63, 0x6F, 0x64, 0x65, 0x64, 0x0D, 0x0A,
		0x48, 0x6F, 0x73, 0x74, 0x3A, 0x20, 0x31, 0x32, 0x37, 0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x31, 0x3A, 0x38, 0x30, 0x31, 0x37,
		0x0D, 0x0A, 0x55, 0x73, 0x65, 0x72, 0x2D, 0x41, 0x67, 0x65, 0x6E, 0x74, 0x3A, 0x20, 0x4D, 0x6F, 0x7A, 0x69, 0x6C, 0x6C,
		0x61, 0x2F, 0x35, 0x2E, 0x30, 0x20, 0x28, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x73, 0x20, 0x4E, 0x54, 0x20, 0x36, 0x2E,
		0x31, 0x3B, 0x20, 0x57, 0x69, 0x6E, 0x36, 0x34, 0x3B, 0x20, 0x78, 0x36, 0x34, 0x29, 0x20, 0x41, 0x70, 0x70, 0x6C, 0x65,
		0x57, 0x65, 0x62, 0x4B, 0x69, 0x74, 0x2F, 0x35, 0x33, 0x37, 0x2E, 0x33, 0x36, 0x20, 0x28, 0x4B, 0x48, 0x54, 0x4D, 0x4C,
		0x2C, 0x20, 0x6C, 0x69, 0x6B, 0x65, 0x20, 0x47, 0x65, 0x63, 0x6B, 0x6F, 0x29, 0x20, 0x43, 0x68, 0x72, 0x6F, 0x6D, 0x65,
		0x2F, 0x37, 0x34, 0x2E, 0x30, 0x2E, 0x33, 0x37, 0x32, 0x39, 0x2E, 0x31, 0x36, 0x39, 0x20, 0x53, 0x61, 0x66, 0x61, 0x72,
		0x69, 0x2F, 0x35, 0x33, 0x37, 0x2E, 0x33, 0x36, 0x0D, 0x0A, 0x0D, 0x0A, 0x49, 0x64, 0x3D, 0x33, 0x30, 0x30, 0x30, 0x31,
		0x26, 0x75, 0x73, 0x65, 0x72, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x41, 0x41, 0x74, 0x65, 0x73, 0x74, 0x30, 0x30, 0x31, 0x26,
		0x73, 0x63, 0x6F, 0x72, 0x65, 0x3D, 0x39, 0x39, 0x39, 0x39, 0x2E, 0x35, 0x35
	};
	int len = sizeof(buf) / sizeof(BYTE);

	int used = 0;
	HttpRequest req;
	bool result = HttpRequest::ParseFromBuf(buf, len, req, used);
}


void CHttpDlg::OnBnClickedButton21()
{
	// TODO:  在此添加控件通知处理程序代码
	HttpResponse response(200);
	response.body.SetTextData("200 OK");

	BYTE buf[1024] = { 0 };
	int n = response.GenerateBuf(buf, 1024);


	string str = BufferTool::Join(buf, n, " ", "%02X");
	OutputDebugStringA(str.c_str());
	OutputDebugStringA("\n");
}


void CHttpDlg::OnBnClickedButton22()
{
	// TODO:  在此添加控件通知处理程序代码
	HttpResponse response(200);

	BYTE buf[1024] = { 0 };
	int n = response.GenerateBuf(buf, 1024);


	string str = BufferTool::Join(buf, n, " ", "%02X");
	OutputDebugStringA(str.c_str());
	OutputDebugStringA("\n");
}


void CHttpDlg::OnBnClickedButton23()
{
	// TODO:  在此添加控件通知处理程序代码
	HttpResponse response;

	//BYTE buf[] = {
	//	0x48, 0x54, 0x54, 0x50, 0x2F, 0x31, 0x2E, 0x31, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4F, 0x4B, 0x0D, 0x0A, 0x43, 0x61, 0x63, 
	//	0x68, 0x65, 0x2D, 0x43, 0x6F, 0x6E, 0x74, 0x72, 0x6F, 0x6C, 0x3A, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x0D, 
	//	0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2D, 0x54, 0x79, 0x70, 0x65, 0x3A, 0x20, 0x61, 0x70, 0x70, 0x6C, 0x69, 
	//	0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x6A, 0x73, 0x6F, 0x6E, 0x3B, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 
	//	0x3D, 0x75, 0x74, 0x66, 0x2D, 0x38, 0x0D, 0x0A, 0x44, 0x61, 0x74, 0x65, 0x3A, 0x20, 0x54, 0x68, 0x75, 0x2C, 0x20, 0x31, 
	//	0x39, 0x20, 0x53, 0x65, 0x70, 0x20, 0x32, 0x30, 0x31, 0x39, 0x20, 0x30, 0x37, 0x3A, 0x35, 0x35, 0x3A, 0x34, 0x38, 0x20, 
	//	0x47, 0x4D, 0x54, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2D, 0x4C, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x3A, 
	//	0x20, 0x38, 0x33, 0x0D, 0x0A, 0x0D, 0x0A, 0x7B, 0x22, 0x63, 0x6F, 0x64, 0x65, 0x22, 0x3A, 0x30, 0x2C, 0x22, 0x64, 0x61, 
	//	0x74, 0x61, 0x22, 0x3A, 0x7B, 0x22, 0x57, 0x53, 0x41, 0x64, 0x64, 0x72, 0x22, 0x3A, 0x22, 0x31, 0x39, 0x32, 0x2E, 0x31, 
	//	0x36, 0x38, 0x2E, 0x30, 0x2E, 0x31, 0x37, 0x35, 0x3A, 0x34, 0x30, 0x34, 0x30, 0x22, 0x2C, 0x22, 0x57, 0x53, 0x53, 0x41, 
	//	0x64, 0x64, 0x72, 0x22, 0x3A, 0x22, 0x64, 0x74, 0x73, 0x72, 0x76, 0x31, 0x2E, 0x69, 0x67, 0x61, 0x6D, 0x69, 0x6E, 0x67, 
	//	0x62, 0x65, 0x74, 0x2E, 0x6F, 0x72, 0x67, 0x22, 0x7D, 0x7D
	//};
	BYTE buf[] = {
		0x48, 0x54, 0x54, 0x50, 0x2F, 0x31, 0x2E, 0x31, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4F, 0x4B, 0x0D, 0x0A, 0x43, 0x61, 0x63, 
		0x68, 0x65, 0x2D, 0x43, 0x6F, 0x6E, 0x74, 0x72, 0x6F, 0x6C, 0x3A, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x0D, 
		0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2D, 0x54, 0x79, 0x70, 0x65, 0x3A, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2F, 
		0x68, 0x74, 0x6D, 0x6C, 0x3B, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3D, 0x75, 0x74, 0x66, 0x2D, 0x38, 0x0D, 
		0x0A, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3A, 0x20, 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x2D, 0x49, 
		0x49, 0x53, 0x2F, 0x37, 0x2E, 0x35, 0x0D, 0x0A, 0x58, 0x2D, 0x41, 0x73, 0x70, 0x4E, 0x65, 0x74, 0x4D, 0x76, 0x63, 0x2D, 
		0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3A, 0x20, 0x34, 0x2E, 0x30, 0x0D, 0x0A, 0x44, 0x61, 0x74, 0x65, 0x3A, 0x20, 
		0x53, 0x61, 0x74, 0x2C, 0x20, 0x32, 0x31, 0x20, 0x53, 0x65, 0x70, 0x20, 0x32, 0x30, 0x31, 0x39, 0x20, 0x31, 0x39, 0x3A, 
		0x34, 0x39, 0x3A, 0x30, 0x30, 0x20, 0x47, 0x4D, 0x54, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2D, 0x4C, 
		0x65, 0x6E, 0x67, 0x74, 0x68, 0x3A, 0x20, 0x31, 0x32, 0x32, 0x0D, 0x0A, 0x0D, 0x0A, 0x0D, 0x0A, 0x49, 0x64, 0x3A, 0x20, 
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x3C, 0x62, 0x72, 0x20, 0x2F, 0x3E, 0x0D, 0x0A, 0x55, 0x73, 0x65, 
		0x72, 0x6E, 0x61, 0x6D, 0x65, 0x3A, 0x20, 0x20, 0x20, 0x41, 0x41, 0x74, 0x65, 0x73, 0x74, 0x30, 0x30, 0x32, 0x3C, 0x62, 
		0x72, 0x20, 0x2F, 0x3E, 0x0D, 0x0A, 0x4E, 0x61, 0x6D, 0x65, 0x3A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xE6, 0xB1,
		0x89, 0xE5, 0xAD, 0x97, 0x31, 0x32, 0x33, 0x71, 0x77, 0x65, 0x21, 0x40, 0x23, 0x3C, 0x62, 0x72, 0x20, 0x2F, 0x3E, 0x0D,
		0x0A, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6D, 0x65, 0x3A, 0x20, 0x20, 0x20, 0x32, 0x30, 0x31, 0x39, 0x2F, 0x39, 0x2F,
		0x32, 0x32, 0x20, 0x33, 0x3A, 0x34, 0x38, 0x3A, 0x34, 0x34, 0x3C, 0x62, 0x72, 0x20, 0x2F, 0x3E
	};
	int len = sizeof(buf) / sizeof(BYTE);
	
	int used = 0;
	bool b = HttpResponse::ParseFromBuf(buf, len, response, used);
}
